import { executeMultipleFiles, executeSqlFile } from "./fileUtils";
import { closeReadline, question } from "./utils";

/**
 * Configure la base de donn√©es en ex√©cutant le fichier setup.sql
 */
export async function setupDb(isProd: boolean = false, passwordArg?: string): Promise<void> {
    try {
        const sqlFileName = isProd ? "setup-prod.sql" : "setup.sql";
        const password = passwordArg || (await question("üîë Mot de passe MySQL : "));
        const success = await executeSqlFile(password, sqlFileName);

        if (success) {
            console.log(`‚úÖ ${sqlFileName}`);
        }
    } catch (error) {
        console.log("‚ùå Erreur :", error);
    } finally {
        closeReadline();
    }
}

/**
 * R√©initialise la base de donn√©es en ex√©cutant le fichier reset.sql
 */
export async function resetDb(isProd: boolean = false, passwordArg?: string): Promise<void> {
    try {
        const sqlFileName = isProd ? "reset-prod.sql" : "reset.sql";
        const password = passwordArg || (await question("üîë Mot de passe MySQL : "));
        const success = await executeSqlFile(password, sqlFileName);

        if (success) {
            console.log(`‚úÖ ${sqlFileName}`);
        }
    } catch (error) {
        console.log("‚ùå Erreur :", error);
    } finally {
        closeReadline();
    }
}

/**
 * Recharge la base de donn√©es en ex√©cutant reset.sql puis setup.sql
 */
export async function reloadDb(isProd: boolean = false, passwordArg?: string): Promise<void> {
    try {
        const files = isProd ? ["reset-prod.sql", "setup-prod.sql"] : ["reset.sql", "setup.sql"];
        const success = await executeMultipleFiles(files, passwordArg);
        if (success) {
            console.log("‚úÖ Base de donn√©es recharg√©e");
        }
    } catch (error) {
        console.log("‚ùå Erreur :", error);
    } finally {
        closeReadline();
    }
}

/**
 * Ex√©cute un fichier SQL personnalis√©
 */
export async function customSqlFile(sqlFile: string, isProd: boolean = false, passwordArg?: string): Promise<void> {
    try {
        // D√©terminer le fichier SQL √† utiliser en fonction du mode
        const sqlFileName = isProd ? sqlFile.replace(".sql", "-prod.sql") : sqlFile;

        const password = passwordArg || (await question("üîë Mot de passe MySQL : "));
        const success = await executeSqlFile(password, sqlFileName);

        if (success) {
            console.log(`‚úÖ ${sqlFileName}`);
        }
    } catch (error) {
        console.log("‚ùå Erreur :", error);
    } finally {
        closeReadline();
    }
}
