import path from "path";
import { ensureDir, removePath } from "./fileUtils";
import { generateAllRoute, generateIndexFiles } from "./indexGenerator";
import { extractModelNames } from "./modelExtractor";
import { generateModel } from "./modelGenerator";

/**
 * G√©n√®re tous les mod√®les
 */
export function generateAllModels(): void {
    console.log('üöÄ D√©marrage de la g√©n√©ration des fichiers...');
    
    // Extraire les noms des mod√®les
    const modelNames = extractModelNames();
    
    if (modelNames.length === 0) {
        console.error('‚ùå Aucun mod√®le trouv√© dans le sch√©ma Prisma');
        return;
    }
    
    console.log(`üìã Mod√®les trouv√©s: ${modelNames.join(', ')}`);
    
    // Supprimer les dossiers g√©n√©r√©s pr√©c√©demment
    removePath(path.join(process.cwd(), 'services/class'));
    removePath(path.join(process.cwd(), 'services/actions'));
    removePath(path.join(process.cwd(), 'services/api'));
    removePath(path.join(process.cwd(), 'app/api/Routes.ts'));
    removePath(path.join(process.cwd(), 'app/api/[...routes]'));
    
    // Cr√©er les dossiers n√©cessaires
    ensureDir(path.join(process.cwd(), 'services/class'));
    ensureDir(path.join(process.cwd(), 'services/actions'));
    ensureDir(path.join(process.cwd(), 'services/api'));
    ensureDir(path.join(process.cwd(), 'app/api/[...routes]'));
    
    // G√©n√©rer les fichiers pour chaque mod√®le
    for (const modelName of modelNames) {
        generateModel(modelName);
    }
    
    // G√©n√©rer les fichiers index
    generateIndexFiles(modelNames);
    
    // G√©n√©rer le fichier [...routes]/route.ts
    generateAllRoute();
    
    console.log('‚úÖ G√©n√©ration termin√©e avec succ√®s!');
}

/**
 * Liste les mod√®les disponibles
 */
export function listModels(): void {
    // Extraire les noms des mod√®les
    const modelNames = extractModelNames();
    
    if (modelNames.length === 0) {
        console.error('‚ùå Aucun mod√®le trouv√© dans le sch√©ma Prisma');
        return;
    }
    
    console.log(`üìã Mod√®les trouv√©s (${modelNames.length}):\n  - ${modelNames.join('\n  - ')}`);
    console.log('\n‚úÖ Listage termin√© avec succ√®s!');
}

/**
 * G√©n√®re un mod√®le sp√©cifique
 */
export function generateSpecificModel(modelName: string): void {
    // V√©rifier si le mod√®le existe
    const modelNames = extractModelNames();
    if (!modelNames.includes(modelName)) {
        console.error(`‚ùå Mod√®le "${modelName}" non trouv√© dans le sch√©ma Prisma`);
        console.log(`üìã Mod√®les disponibles: ${modelNames.join(', ')}`);
        return;
    }
    
    console.log(`üöÄ D√©marrage de la g√©n√©ration pour le mod√®le ${modelName}...`);
    
    // Cr√©er les dossiers n√©cessaires s'ils n'existent pas
    ensureDir(path.join(process.cwd(), 'services/class'));
    ensureDir(path.join(process.cwd(), 'services/actions'));
    ensureDir(path.join(process.cwd(), 'services/api'));
    
    // G√©n√©rer les fichiers pour le mod√®le sp√©cifique
    generateModel(modelName);
    
    console.log(`‚úÖ G√©n√©ration pour le mod√®le ${modelName} termin√©e avec succ√®s!`);
} 