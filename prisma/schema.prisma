generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id            String  @id @unique @default(nanoid())
    name          String
    email         String  @unique
    emailVerified Boolean
    image         String?

    phone    String?

    stripeId        String? // Regular Stripe Customer ID
    stripeConnectId String? // Stripe Connect Account ID
    isOnboarded     Boolean @default(false) // Track if seller has completed Stripe onboarding
    isSeller        Boolean @default(false) // Track if user wants to be a seller

    Adress   Address[]
    Order    Order[]

    role    Role      @default(USER)
    Product Product[] // for vendor only

    // One to Many
    Session Session[]
    Account Account[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("user")
}

enum Role {
    USER
    VENDOR
    EMPLOYEE
    ADMIN
}

model Category {
    id          String    @id @unique @default(nanoid())
    name        String
    description String?
    products    Product[] @relation("CategoryToProduct") // Relation avec les produits

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("categories")
}

model Product {
    id          String @id @unique @default(nanoid())
    name        String
    description String
    image       String
    price       Float
    stock       Int

    vendorId    String
    user        User   @relation(fields: [vendorId], references: [id], onDelete: Cascade)

    quantity    Quantity[]

    categoryId  String? // Ajout de la clé étrangère
    category    Category? @relation("CategoryToProduct", fields: [categoryId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("product")
}



model Quantity {
    id String @id @unique @default(nanoid())
    quantity Int

    productId String
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

    orderId String
    order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("quantity")
}

model Order {
    id String @id @unique @default(nanoid())
    // orderNumber String

    // items         Json
    orderStatus   OrderStatus   @default(PENDING)
    paymentStatus PaymentStatus @default(PENDING)

    // Many to One
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    quantity Quantity[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("order")
}

enum OrderStatus {
    PENDING // in cart
    ACCEPTED // order paid
    PREPARING // preparing for shipment
    DELIVERING // in delivering
    COMPLETED // delivered
    CANCELLED // order cancelled
    RETURNING // order retturning
    REFOUNDED // order refunded
}

enum PaymentStatus {
    PENDING
    ACCEPTED
    REFUSED
    REFUNDED
}

model Address {
    id      String @id @unique @default(nanoid())
    address String
    postal  String
    city    String
    country String

    isPrimary Boolean

    // Many to One
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("address")
}

model Session {
    id        String   @id @unique @default(nanoid())
    token     String
    expiresAt DateTime
    ipAddress String?
    userAgent String?

    // Many to One
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@map("session")
}

model Account {
    id         String @id @unique @default(nanoid())
    accountId  String
    providerId String

    // Many to One
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    accessToken  String?
    refreshToken String?

    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?

    scope    String?
    password String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("account")
}

model Verification {
    id         String   @id @unique @default(nanoid())
    identifier String
    value      String
    expiresAt  DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("verification")
}

model Fruit {
    id          String @id @unique @default(nanoid())
    name        String
    description String
    image       String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("fruits")
}


