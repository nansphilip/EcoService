import { {{modelName}}Model{{#if hasRelations}}, Related{{modelName}}Model{{/if}} } from "@actions/zod-generated";
import { {{modelName}}, Prisma } from "@prisma/client";
import { z } from "zod";

/** Represents the {{modelName}}'s model {{#if hasRelations}}with relations{{/if}} */
export type {{modelName}}Type = z.infer<typeof {{#if hasRelations}}Related{{modelName}}Model{{else}}{{modelName}}Model{{/if}}>;

/** Represents the {{modelName}}'s unique identifier */
export type {{modelName}}Id = Pick<{{modelName}}, "id">;

/** Represents common {{modelName}} properties without system-managed fields */
export type {{modelName}}Common = Omit<{{modelName}}, "id" | "createdAt" | "updatedAt">;

/** Represents data structure for updating a {{modelName}} */
export type {{modelName}}Update = {
    id: {{modelName}}["id"];
    data: {{modelName}}Common;
};

/** Represents system-managed timestamp fields */
export type {{modelName}}Timestamps = Pick<{{modelName}}, "createdAt" | "updatedAt">;

/** Find one options for {{modelName}}s */
export type Select{{modelName}}Props = Pick<Prisma.{{modelName}}FindUniqueArgs, "where" | "select">;

/** Find many options for {{modelName}}s */
export type Select{{modelName}}ListProps = Pick<Prisma.{{modelName}}FindManyArgs, "orderBy" | "take" | "skip" | "where" | "select">;

/** Count options for {{modelName}}s */
export type Select{{modelName}}AmountProps = Pick<Prisma.{{modelName}}CountArgs, "where">;
