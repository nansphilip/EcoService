"use server";

import {
    {{modelName}}Common,
    {{modelName}}Id,
    {{modelName}}Type,
    {{modelName}}Update,
    Select{{modelName}}AmountProps,
    Select{{modelName}}ListProps,
    Select{{modelName}}Props,
} from "@actions/types/{{modelName}}";
import {
    select{{modelName}}AmountSchema,
    select{{modelName}}ListSchema,
    select{{modelName}}UniqueSchema,
} from "@actions/zod-sensitive/{{modelName}}";
import { {{modelNameLower}}CommonSchema, {{modelNameLower}}IdObjectSchema, {{modelNameLower}}UpdateSchema } from "@actions/zod/{{modelName}}";
import PrismaInstance from "@lib/prisma";
import { PrismaClientKnownRequestError } from "@prisma/client/runtime/library";
import { ZodError } from "zod";

/**
 * Response type for {{modelName}} mutations
 */
export type {{modelName}}MutationResponse = {
    {{modelNameLower}}Data?: {{modelName}}Type;
    error?: string;
};

/**
 * Creates a new {{modelNameLower}}
 * @param props {{modelName}} properties
 * @returns Created {{modelNameLower}} or null
 */
export const Create{{modelName}} = async (props: {{modelName}}Common): Promise<{{modelName}}MutationResponse> => {
    try {
        const data = {{modelNameLower}}CommonSchema.parse(props);

        const {{modelNameLower}}Data: {{modelName}}Type = await PrismaInstance.{{modelNameLower}}.create({ data });

        return { {{modelNameLower}}Data };
    } catch (error) {
        console.error("Create{{modelName}} -> " + (error as Error).message);
        if (process.env.NODE_ENV === "development") {
            if (error instanceof ZodError) throw new Error("Create{{modelName}} -> Invalid Zod params -> " + error.message);
            if (error instanceof PrismaClientKnownRequestError)
                throw new Error("Create{{modelName}} -> Prisma error -> " + error.message);
            throw new Error("Create{{modelName}} -> " + (error as Error).message);
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
};

/**
 * Updates a {{modelNameLower}}
 * @param props {{modelName}} ID and new data
 * @returns Updated {{modelNameLower}} or null
 */
export const Update{{modelName}} = async (props: {{modelName}}Update): Promise<{{modelName}}MutationResponse> => {
    try {
        const { id, data } = {{modelNameLower}}UpdateSchema.parse(props);
        const {{modelNameLower}}Data: {{modelName}}Type = await PrismaInstance.{{modelNameLower}}.update({
            where: { id },
            data,
        });
        return { {{modelNameLower}}Data };
    } catch (error) {
        console.error("Update{{modelName}} -> " + (error as Error).message);
        if (process.env.NODE_ENV === "development") {
            if (error instanceof ZodError) throw new Error("Update{{modelName}} -> Invalid Zod params -> " + error.message);
            if (error instanceof PrismaClientKnownRequestError)
                throw new Error("Update{{modelName}} -> Prisma error -> " + error.message);
            throw new Error("Update{{modelName}} -> " + (error as Error).message);
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
};

/**
 * Deletes a {{modelNameLower}}
 * @param props {{modelName}} ID
 * @returns Deleted {{modelNameLower}} or null
 */
export const Delete{{modelName}} = async (props: {{modelName}}Id): Promise<{{modelName}}MutationResponse> => {
    try {
        const { id } = {{modelNameLower}}IdObjectSchema.parse(props);
        const {{modelNameLower}}Data: {{modelName}}Type = await PrismaInstance.{{modelNameLower}}.delete({
            where: { id },
        });
        return { {{modelNameLower}}Data };
    } catch (error) {
        console.error("Delete{{modelName}} -> " + (error as Error).message);
        if (process.env.NODE_ENV === "development") {
            if (error instanceof ZodError) throw new Error("Delete{{modelName}} -> Invalid Zod params -> " + error.message);
            if (error instanceof PrismaClientKnownRequestError)
                throw new Error("Delete{{modelName}} -> Prisma error -> " + error.message);
            throw new Error("Delete{{modelName}} -> " + (error as Error).message);
        }
        // TODO: add logging
        return { error: "Something went wrong..." };
    }
};

/**
 * Retrieves a {{modelNameLower}} by ID or another filter (no caching) \
 * WARNING: do not use this for fetching data -> use API routes with caching instead
 * @param props {{modelName}} ID or other filter (name, description...)
 * @returns Found {{modelNameLower}} or null
 */
export const Select{{modelName}} = async (props: Select{{modelName}}Props): Promise<{{modelName}}Type | null> => {
    try {
        const { where, select } = select{{modelName}}UniqueSchema.parse(props);
        const {{modelNameLower}}Data: {{modelName}}Type | null = await PrismaInstance.{{modelNameLower}}.findUnique({
            where,
            ...(select && { select }),
        });
        return {{modelNameLower}}Data;
    } catch (error) {
        console.error("Select{{modelName}} -> " + (error as Error).message);
        if (process.env.NODE_ENV === "development") {
            if (error instanceof ZodError) throw new Error("Select{{modelName}} -> Invalid Zod params -> " + error.message);
            if (error instanceof PrismaClientKnownRequestError)
                throw new Error("Select{{modelName}} -> Prisma error -> " + error.message);
            throw new Error("Select{{modelName}} -> " + (error as Error).message);
        }
        // TODO: add logging
        return null;
    }
};

/**
 * Retrieves a list of {{namePlural}} with filters (no caching) \
 * WARNING: do not use this for fetching data -> use API routes with caching instead
 * @param props Filter and pagination options
 * @returns List of {{namePlural}} or null
 */
export const Select{{modelName}}List = async (props: Select{{modelName}}ListProps): Promise<{{modelName}}Type[] | null> => {
    try {
        const { select, orderBy, take = 10, skip = 0, where } = select{{modelName}}ListSchema.parse(props);

        const {{modelNameLower}}DataList: {{modelName}}Type[] = await PrismaInstance.{{modelNameLower}}.findMany({
            ...(select && { select }),
            ...(orderBy && { orderBy }),
            ...(take && { take }),
            ...(skip && { skip }),
            ...(where && { where }),
        });
        return {{modelNameLower}}DataList.length ? {{modelNameLower}}DataList : null;
    } catch (error) {
        console.error("Select{{modelName}}List -> " + (error as Error).message);
        if (process.env.NODE_ENV === "development") {
            if (error instanceof ZodError) throw new Error("Select{{modelName}}List -> Invalid Zod params -> " + error.message);
            if (error instanceof PrismaClientKnownRequestError)
                throw new Error("Select{{modelName}}List -> Prisma error -> " + error.message);
            throw new Error("Select{{modelName}}List -> " + (error as Error).message);
        }
        // TODO: add logging
        return null;
    }
};

/**
 * Counts {{namePlural}} with filters (no caching) \
 * WARNING: do not use this for fetching data -> use API routes with caching instead
 * @param props Filter options
 * @returns Count of {{namePlural}} or null
 */
export const Select{{modelName}}Amount = async (props: Select{{modelName}}AmountProps): Promise<number | null> => {
    try {
        const { where } = select{{modelName}}AmountSchema.parse(props);

        const {{modelNameLower}}Amount = await PrismaInstance.{{modelNameLower}}.count({
            ...(where && { where }),
        });

        return {{modelNameLower}}Amount;
    } catch (error) {
        console.error("Select{{modelName}}Amount -> " + (error as Error).message);
        if (process.env.NODE_ENV === "development") {
            if (error instanceof ZodError) throw new Error("Select{{modelName}}Amount -> Invalid Zod params -> " + error.message);
            if (error instanceof PrismaClientKnownRequestError)
                throw new Error("Select{{modelName}}Amount -> Prisma error -> " + error.message);
            throw new Error("Select{{modelName}}Amount -> " + (error as Error).message);
        }
        // TODO: add logging
        return null;
    }
};
